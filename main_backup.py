#!/usr/bin/env python3
"""
Jogo Educacional com Chatbot Multimodal
Desenvolvido do zero sem modelos pr√©-treinados
"""

import torch
import torch.nn as nn
from PIL import Image
import json
import os
import time
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import base64
import io

# Importar nossos m√≥dulos
from models.multimodal_model import EducationalMultimodalModel
from game.gamification import GamificationSystem
import sys
sys.path.append('training')
from recife_historic_trainer import RecifeHistoricTrainer
from training.trainer import SimpleTokenizer, EducationalDataset
import torchvision.transforms as transforms

class EducationalGame:
    """
    Classe principal do jogo educacional
    """
    
    def __init__(self):
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        print(f"Usando device: {self.device}")
        
        # Inicializar componentes
        self.tokenizer = SimpleTokenizer()
        self.gamification = GamificationSystem()
        
        # Inicializar treinador de pontos hist√≥ricos do Recife
        self.recife_trainer = RecifeHistoricTrainer()
        
        # Tentar carregar modelo treinado
        if not self.recife_trainer.load_model():
            print("‚ö†Ô∏è Modelo treinado n√£o encontrado!")
            print("üîÑ Execute o treinamento primeiro: python train_recife_model.py")
        
        # Carregar modelo
        self.model = self._load_model()
        
        # Transforma√ß√µes para imagens
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        
        # Cache para melhorar consist√™ncia das respostas
        self.image_cache = {}
        self.last_image_hash = None
        
        print("Jogo inicializado com sucesso!")
    
    def _load_model(self):
        """Carrega o modelo treinado"""
        model = EducationalMultimodalModel(vocab_size=self.tokenizer.vocab_size)
        
        # Tentar carregar pesos treinados
        if os.path.exists('best_model.pth'):
            model.load_state_dict(torch.load('best_model.pth', map_location=self.device))
            print("Modelo treinado carregado!")
        else:
            print("Usando modelo n√£o treinado (pesos aleat√≥rios)")
        
        model.to(self.device)
        model.eval()
        return model
    
    def process_image_and_question(self, image_data, question, player_id):
        """
        Processa uma imagem e pergunta do jogador
        """
        start_time = time.time()
        
        try:
            # Decodificar imagem
            if image_data.startswith('data:image'):
                image_data = image_data.split(',')[1]
            
            image_bytes = base64.b64decode(image_data)
            image = Image.open(io.BytesIO(image_bytes)).convert('RGB')
            
            # Criar hash da imagem para cache
            import hashlib
            image_hash = hashlib.md5(image_bytes).hexdigest()
            
            # Transformar imagem
            image_tensor = self.transform(image).unsqueeze(0).to(self.device)
            
            # Tokenizar pergunta
            question_tokens = self.tokenizer.encode(question, max_length=50)
            question_tensor = torch.tensor(question_tokens, dtype=torch.long).unsqueeze(0).to(self.device)
            
            # Processar com modelo
            with torch.no_grad():
                outputs = self.model(image_tensor, question_tensor)
            
            # Gerar resposta (melhorada)
            answer = self._generate_answer(outputs, question, image_hash, image)
            explanation = self._generate_explanation(outputs, question, answer)
            
            # Calcular tempo de resposta
            response_time = time.time() - start_time
            
            # Simular avalia√ß√£o da resposta (em produ√ß√£o seria mais sofisticada)
            is_correct = self._evaluate_answer(answer, question)
            
            # Processar no sistema de gamifica√ß√£o
            game_result = self.gamification.submit_answer(
                player_id, is_correct, response_time, "general"
            )
            
            return {
                "success": True,
                "answer": answer,
                "explanation": explanation,
                "is_correct": is_correct,
                "response_time": response_time,
                "game_result": game_result
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def _analyze_image_features(self, image):
        """Simula an√°lise de caracter√≠sticas visuais da imagem"""
        # Em produ√ß√£o, isso seria feito pelo modelo de vis√£o
        # Por agora, simular baseado em caracter√≠sticas comuns
        import random
        
        # Simular detec√ß√£o de caracter√≠sticas visuais
        features = {
            "has_stripes": random.random() < 0.3,  # 30% chance de ter listras
            "has_fur": random.random() < 0.7,     # 70% chance de ter pelo
            "has_wings": random.random() < 0.2,   # 20% chance de ter asas
            "has_trunk": random.random() < 0.1,  # 10% chance de ter tromba
            "has_mane": random.random() < 0.15,   # 15% chance de ter juba
            "is_green": random.random() < 0.4,    # 40% chance de ser verde
            "has_leaves": random.random() < 0.3, # 30% chance de ter folhas
            "is_mechanical": random.random() < 0.2 # 20% chance de ser mec√¢nico
        }
        
        return features
    
    def _detect_zebra_features(self, image):
        """Detecta caracter√≠sticas espec√≠ficas de zebra na imagem"""
        # Simular an√°lise mais sofisticada para zebras
        import random
        
        # Converter imagem para an√°lise b√°sica
        import numpy as np
        img_array = np.array(image)
        
        # Simular detec√ß√£o de listras (padr√£o preto e branco)
        # Em produ√ß√£o, isso seria feito com an√°lise de gradientes
        has_stripes = random.random() < 0.3  # Reduzido para 30% - listras s√£o raras
        
        # Simular detec√ß√£o de formato de cavalo/equ√≠deo
        is_horse_like = random.random() < 0.7  # 70% chance de ser formato de cavalo
        
        # Simular detec√ß√£o de ambiente (savana/grama)
        has_grass_background = random.random() < 0.8  # 80% chance de ter grama ao fundo
        
        return {
            "has_stripes": has_stripes,
            "is_horse_like": is_horse_like,
            "has_grass_background": has_grass_background,
            "is_zebra": has_stripes and is_horse_like and has_grass_background
        }
    
    def _analyze_image_content(self, image):
        """An√°lise usando modelo treinado para pontos hist√≥ricos do Recife"""
        try:
            # Salvar imagem temporariamente para an√°lise
            temp_path = "temp_image.jpg"
            image.save(temp_path)
            
            # Usar modelo treinado para predi√ß√£o
            predicted_class, confidence = self.recife_trainer.predict(temp_path)
            
            # Remover arquivo tempor√°rio
            if os.path.exists(temp_path):
                os.remove(temp_path)
            
            # Retornar resultado da an√°lise
            return {
                "predicted_class": predicted_class,
                "confidence": confidence,
                "model_trained": True,
                "location_info": self.recife_trainer.get_location_info(predicted_class)
            }
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise com modelo treinado: {e}")
            # Fallback para an√°lise b√°sica
            return self._analyze_image_content_fallback(image)
    
    def _analyze_image_content_fallback(self, image):
        """An√°lise b√°sica como fallback"""
        import numpy as np
        
        # Converter imagem para an√°lise
        img_array = np.array(image)
        height, width = img_array.shape[:2]
        
        # An√°lise de cores dominantes
        colors = img_array.reshape(-1, 3)
        avg_r = np.mean(colors[:, 0])
        avg_g = np.mean(colors[:, 1])
        avg_b = np.mean(colors[:, 2])
        
        # Determinar cor dominante
        dominant_color = "unknown"
        if avg_r > 200 and avg_g > 200 and avg_b > 200:
            dominant_color = "white"
        elif avg_r < 50 and avg_g < 50 and avg_b < 50:
            dominant_color = "black"
        elif avg_g > avg_r + 30 and avg_g > avg_b + 30:
            dominant_color = "green"
        elif avg_b > avg_r + 30 and avg_b > avg_g + 30:
            dominant_color = "blue"
        elif avg_r > avg_g + 30 and avg_r > avg_b + 30:
            dominant_color = "red"
        elif avg_r > 150 and avg_g > 100 and avg_b < 100:
            dominant_color = "yellow"
        elif 80 < avg_r < 150 and 60 < avg_g < 120 and 40 < avg_b < 100:
            dominant_color = "brown"
        elif abs(avg_r - avg_g) < 20 and abs(avg_g - avg_b) < 20:
            dominant_color = "gray"
        
        return {
            "predicted_class": "objeto n√£o identificado",
            "confidence": 0.1,
            "model_trained": False,
            "dominant_color": dominant_color
        }
    
    def _classify_image_content(self, features):
        """Classifica√ß√£o usando modelo treinado para pontos hist√≥ricos do Recife"""
        
        # Se temos resultado do modelo treinado, usar ele
        if features.get("model_trained", False):
            predicted_class = features.get("predicted_class", "local n√£o identificado")
            confidence = features.get("confidence", 0.0)
            location_info = features.get("location_info", {})
            
            print(f"üß† Modelo treinado: {location_info.get('nome', predicted_class)} (confian√ßa: {confidence:.2f})")
            
            # Se a confian√ßa √© alta, usar a predi√ß√£o
            if confidence > 0.3:
                return predicted_class
            else:
                print("‚ö†Ô∏è Confian√ßa baixa, usando fallback")
        
        # Fallback para an√°lise b√°sica
        dominant_color = features.get("dominant_color", "unknown")
        
        # L√≥gica simples baseada na cor dominante para pontos hist√≥ricos
        if dominant_color == "brown":
            return "marco_zero"  # Marco Zero tem cal√ßada de pedra marrom
        elif dominant_color == "yellow":
            return "praia_boa_viagem"  # Praia tem areia amarelada
        elif dominant_color == "gray":
            return "casa_da_cultura"  # Casa da Cultura √© de pedra cinza
        elif dominant_color == "blue":
            return "praia_boa_viagem"  # Praia tem mar azul
        elif dominant_color == "green":
            return "pra√ßa_do_arsenal"  # Pra√ßas t√™m vegeta√ß√£o verde
        else:
            return "local n√£o identificado"
    
    def _generate_answer(self, outputs, question, image_hash=None, image=None):
        """Gera resposta baseada nas sa√≠das do modelo"""
        # Implementa√ß√£o melhorada com an√°lise de palavras-chave
        answer_logits = outputs['answer_logits']
        _, predicted = torch.max(answer_logits, 1)
        
        # Analisar a pergunta para dar resposta mais espec√≠fica
        question_lower = question.lower()
        
        # Se temos a imagem, fazer an√°lise completa do conte√∫do
        if image is not None:
            # Verificar cache primeiro
            if image_hash and image_hash in self.image_cache:
                cached_answer = self.image_cache[image_hash]
                return cached_answer
            
            # An√°lise completa da imagem
            features = self._analyze_image_content(image)
            classification = self._classify_image_content(features)
            
            # Debug: mostrar an√°lise da imagem
            print(f"üîç An√°lise da Imagem:")
            if features.get("model_trained", False):
                print(f"  üß† Modelo treinado: {features.get('predicted_class', 'unknown')}")
                print(f"  üìä Confian√ßa: {features.get('confidence', 0.0):.2f}")
            else:
                print(f"  üìä Cor dominante: {features.get('dominant_color', 'unknown')}")
                print(f"  ‚ö†Ô∏è Usando an√°lise b√°sica (fallback)")
            
            print(f"üéØ Classifica√ß√£o final: {classification}")
            
            # Gerar resposta baseada na classifica√ß√£o
            if classification != "local n√£o identificado":
                # Obter informa√ß√µes do local
                location_info = features.get("location_info", {})
                if location_info:
                    answer = f"Este √© o {location_info.get('nome', classification)}"
                else:
                    answer = f"Este √© o {classification.replace('_', ' ').title()}"
                # Salvar no cache
                if image_hash:
                    self.image_cache[image_hash] = answer
                return answer
        
        # Detectar tipo de pergunta sobre pontos hist√≥ricos
        if "onde" in question_lower or "local" in question_lower or "hist√≥rico" in question_lower:
            # Verificar se j√° temos uma resposta em cache para esta imagem
            if image_hash and image_hash in self.image_cache:
                cached_answer = self.image_cache[image_hash]
                return cached_answer
            
            # Simular an√°lise da imagem (em produ√ß√£o seria mais sofisticada)
            import random
            
            # Para perguntas sobre animais, dar respostas mais espec√≠ficas
            # Cavalos s√£o mais comuns que zebras, ent√£o maior probabilidade
            if "cavalo" in question_lower or random.random() < 0.6:  # 60% chance de identificar cavalo
                answer = "Este √© um cavalo"
                # Salvar no cache
                if image_hash:
                    self.image_cache[image_hash] = answer
                return answer
            elif "zebra" in question_lower or random.random() < 0.2:  # 20% chance de identificar zebra
                answer = "Esta √© uma zebra"
                # Salvar no cache
                if image_hash:
                    self.image_cache[image_hash] = answer
                return answer
            
            animals = [
                "Este √© um c√£o",
                "Este √© um gato", 
                "Esta √© uma zebra",
                "Este √© um le√£o",
                "Este √© um elefante",
                "Este √© um p√°ssaro",
                "Este √© um cavalo",
                "Esta √© uma vaca"
            ]
            answer = random.choice(animals)
            # Salvar no cache
            if image_hash:
                self.image_cache[image_hash] = answer
            return answer
        
        elif "planta" in question_lower or "que tipo de planta" in question_lower:
            plants = [
                "Esta √© uma flor",
                "Esta √© uma √°rvore",
                "Esta √© uma folha",
                "Esta √© uma grama",
                "Esta √© uma rosa",
                "Esta √© uma palmeira"
            ]
            return random.choice(plants)
        
        elif "objeto" in question_lower or "que objeto" in question_lower:
            objects = [
                "Este √© um carro",
                "Esta √© uma casa",
                "Este √© um livro",
                "Esta √© uma mesa",
                "Este √© um telefone",
                "Esta √© uma bicicleta"
            ]
            return random.choice(objects)
        
        else:
            # Resposta gen√©rica baseada na predi√ß√£o do modelo
            answers = {
                0: "Este √© um animal",
                1: "Esta √© uma planta", 
                2: "Este √© um objeto",
                3: "Esta √© uma paisagem"
            }
            return answers.get(predicted.item(), "N√£o consegui identificar com certeza.")
    
    def _generate_explanation(self, outputs, question, answer=None):
        """Gera explica√ß√£o educativa sobre pontos hist√≥ricos do Recife"""
        explanation_logits = outputs['explanation_logits']
        _, predicted = torch.max(explanation_logits, 1)
        
        # Se temos uma resposta espec√≠fica, gerar explica√ß√£o baseada nela
        if answer:
            answer_lower = answer.lower()
            
            # Explica√ß√µes espec√≠ficas para pontos hist√≥ricos do Recife
            if "marco zero" in answer_lower:
                return "O Marco Zero √© a pra√ßa principal do Recife Antigo, onde a cidade foi fundada em 1537. √â um marco hist√≥rico que representa o in√≠cio da coloniza√ß√£o portuguesa no Nordeste. A pra√ßa tem cal√ßada de pedra portuguesa e vista para o mar, sendo um dos pontos tur√≠sticos mais importantes da cidade."
            elif "praia boa viagem" in answer_lower:
                return "A Praia de Boa Viagem √© a principal praia urbana do Recife, conhecida por sua extensa faixa de areia e cal√ßad√£o. √â uma das praias mais famosas do Nordeste, com coqueiros e vista para o mar. O nome 'Boa Viagem' vem de uma capela constru√≠da no local para aben√ßoar os navegantes."
            elif "casa da cultura" in answer_lower:
                return "A Casa da Cultura √© um importante centro cultural do Recife, localizado no antigo pr√©dio da Casa de Deten√ß√£o, constru√≠do em 1855. Foi transformada em centro cultural em 1976 e hoje abriga lojas de artesanato, onde as antigas celas foram transformadas em espa√ßos comerciais. √â um exemplo de preserva√ß√£o do patrim√¥nio hist√≥rico."
            elif "forte das cinco pontas" in answer_lower:
                return "O Forte das Cinco Pontas √© uma fortaleza hist√≥rica constru√≠da pelos holandeses em 1630. Tem formato pentagonal √∫nico e foi constru√≠do para defender a cidade. Hoje abriga o Museu da Cidade do Recife e √© um importante marco da arquitetura militar colonial."
            elif "igreja s√£o pedro dos cl√©rigos" in answer_lower:
                return "A Igreja de S√£o Pedro dos Cl√©rigos √© uma igreja barroca do s√©culo XVIII, constru√≠da entre 1728 e 1782. √â conhecida por sua torre alta e fachada barroca elaborada. O interior √© ricamente decorado com dourado e representa um dos melhores exemplos da arquitetura religiosa colonial do Recife."
            elif "rua do bom jesus" in answer_lower:
                return "A Rua do Bom Jesus √© uma das ruas mais antigas do Recife, localizada no bairro do Recife Antigo. √â conhecida por suas casas coloridas e arquitetura colonial. A rua tem import√¢ncia hist√≥rica e cultural, sendo um dos principais pontos tur√≠sticos da cidade."
            elif "ponte mauricio de nassau" in answer_lower:
                return "A Ponte Mauricio de Nassau √© uma ponte hist√≥rica que conecta o Recife Antigo ao centro da cidade. Foi constru√≠da durante o per√≠odo holand√™s e √© uma das pontes mais antigas do Brasil. √â um importante marco da engenharia colonial e da hist√≥ria da cidade."
            elif "pra√ßa do arsenal" in answer_lower:
                return "A Pra√ßa do Arsenal √© uma pra√ßa hist√≥rica localizada no Recife Antigo, pr√≥xima ao Marco Zero. √â um espa√ßo p√∫blico importante que preserva a arquitetura colonial e oferece vista para o mar. A pra√ßa √© cercada por pr√©dios hist√≥ricos e √© um local de encontro e lazer."
            elif "igreja nossa senhora do carmo" in answer_lower:
                return "A Igreja de Nossa Senhora do Carmo √© uma igreja hist√≥rica do Recife, conhecida por sua arquitetura barroca e interior ricamente decorado. √â um importante marco religioso e arquitet√¥nico da cidade, representando a tradi√ß√£o cat√≥lica colonial."
            elif "pal√°cio da justi√ßa" in answer_lower:
                return "O Pal√°cio da Justi√ßa √© um pr√©dio hist√≥rico que abriga o Tribunal de Justi√ßa de Pernambuco. √â um exemplo da arquitetura neocl√°ssica e representa a import√¢ncia da justi√ßa na hist√≥ria da cidade. O pr√©dio √© um marco da arquitetura institucional do Recife."
            
            # Explica√ß√£o gen√©rica para outros locais hist√≥ricos
            else:
                return f"Este √© um importante ponto hist√≥rico do Recife. A cidade tem uma rica hist√≥ria colonial, com influ√™ncias portuguesas e holandesas. Cada local hist√≥rico conta uma parte da hist√≥ria da cidade e do Brasil."
        
        # Explica√ß√£o gen√©rica baseada na pergunta
        question_lower = question.lower()
        if "onde" in question_lower:
            return "Esta pergunta envolve localiza√ß√£o geogr√°fica. O sistema analisou elementos visuais que podem indicar caracter√≠sticas arquitet√¥nicas e geogr√°ficas espec√≠ficas do Recife."
        elif "hist√≥rico" in question_lower or "historia" in question_lower:
            return "Esta pergunta envolve conhecimento hist√≥rico. O sistema examinou caracter√≠sticas arquitet√¥nicas e visuais para identificar o contexto hist√≥rico do local."
        elif "que" in question_lower:
            return "Esta √© uma pergunta sobre identifica√ß√£o de locais hist√≥ricos. O sistema analisou as caracter√≠sticas visuais da imagem para identificar o ponto hist√≥rico espec√≠fico do Recife."
        elif "como" in question_lower:
            return "Esta pergunta envolve an√°lise de caracter√≠sticas arquitet√¥nicas e hist√≥ricas. O sistema examinou os detalhes visuais para entender melhor o local hist√≥rico."
        else:
            return "Esta √© uma pergunta interessante sobre pontos hist√≥ricos do Recife. O sistema examinou cuidadosamente os detalhes da imagem para identificar o local hist√≥rico espec√≠fico e fornecer informa√ß√µes educativas sobre sua import√¢ncia."
            elif "cardeal" in answer_lower:
                return "Os cardeais s√£o p√°ssaros pequenos conhecidos por sua cor vermelha vibrante (machos) e canto melodioso. S√£o comuns na Am√©rica do Norte e s√£o s√≠mbolos de v√°rias regi√µes."
            elif "peixe" in answer_lower:
                return "Os peixes s√£o animais aqu√°ticos vertebrados que respiram por br√¢nquias. Vivem em √°gua doce ou salgada e s√£o importantes para o ecossistema aqu√°tico e alimenta√ß√£o humana."
            elif "cobra" in answer_lower:
                return "As cobras s√£o r√©pteis alongados sem pernas, conhecidas por sua capacidade de se mover rastejando. Algumas s√£o venenosas e outras n√£o, mas todas s√£o importantes para o controle de pragas."
            
            # Explica√ß√µes para plantas
            elif "flor" in answer_lower:
                return "As flores s√£o estruturas reprodutivas das plantas. Elas s√£o respons√°veis pela produ√ß√£o de sementes e muitas vezes s√£o coloridas para atrair polinizadores como abelhas e borboletas."
            elif "rosa" in answer_lower:
                return "As rosas s√£o flores conhecidas por sua beleza e perfume. Pertencem ao g√™nero Rosa e s√£o s√≠mbolos universais de amor e romance. Existem milhares de variedades diferentes."
            elif "girassol" in answer_lower:
                return "Os girass√≥is s√£o plantas conhecidas por suas grandes flores amarelas que seguem o movimento do sol. Produzem sementes comest√≠veis e √≥leo, sendo importantes economicamente."
            elif "√°rvore" in answer_lower:
                return "As √°rvores s√£o plantas lenhosas de grande porte com tronco principal e copa. Elas s√£o fundamentais para o ecossistema, produzindo oxig√™nio, absorvendo CO2 e fornecendo habitat para muitos animais."
            elif "tronco" in answer_lower:
                return "O tronco √© a parte principal de uma √°rvore, respons√°vel por sustentar a copa e transportar √°gua e nutrientes. √â feito de madeira e cresce em camadas conc√™ntricas."
            elif "√°rvore frut√≠fera" in answer_lower:
                return "As √°rvores frut√≠feras s√£o plantas que produzem frutos comest√≠veis. S√£o importantes para a alimenta√ß√£o humana e animal, al√©m de serem economicamente valiosas."
            elif "planta" in answer_lower:
                return "As plantas s√£o seres vivos que fazem fotoss√≠ntese. Elas s√£o fundamentais para a vida na Terra, produzindo oxig√™nio e servindo como base da cadeia alimentar."
            elif "folha" in answer_lower:
                return "As folhas s√£o √≥rg√£os das plantas respons√°veis pela fotoss√≠ntese. Elas capturam a luz solar e convertem CO2 e √°gua em glicose, liberando oxig√™nio como subproduto."
            
            # Explica√ß√µes para objetos
            elif "carro" in answer_lower:
                return "Os carros s√£o ve√≠culos automotores para transporte terrestre. Eles revolucionaram a mobilidade humana e s√£o essenciais na sociedade moderna, movidos por motores de combust√£o ou el√©tricos."
            elif "bicicleta" in answer_lower:
                return "As bicicletas s√£o ve√≠culos de duas rodas movidos pela for√ßa humana. S√£o uma forma eficiente e ecol√≥gica de transporte, al√©m de serem usadas para exerc√≠cio e lazer."
            elif "ferramenta" in answer_lower:
                return "As ferramentas s√£o objetos criados para facilitar o trabalho humano. Podem ser manuais ou el√©tricas e s√£o essenciais para constru√ß√£o, reparos e muitas outras atividades."
            elif "m√°quina" in answer_lower:
                return "As m√°quinas s√£o dispositivos mec√¢nicos que realizam trabalho. Podem ser simples como alavancas ou complexas como computadores, sempre facilitando tarefas humanas."
            elif "mesa" in answer_lower:
                return "As mesas s√£o m√≥veis com superf√≠cie plana apoiada por pernas. S√£o usadas para refei√ß√µes, trabalho, estudos e muitas outras atividades cotidianas."
            elif "cadeira" in answer_lower:
                return "As cadeiras s√£o m√≥veis para sentar, geralmente com encosto e quatro pernas. S√£o fundamentais para conforto e ergonomia em ambientes de trabalho e lazer."
            elif "casa" in answer_lower:
                return "As casas s√£o estruturas constru√≠das para abrigar pessoas. Podem ser feitas de diversos materiais como madeira, tijolo ou concreto, e servem como prote√ß√£o contra o clima."
            elif "janela" in answer_lower:
                return "As janelas s√£o aberturas nas paredes com vidro para permitir entrada de luz e ventila√ß√£o. S√£o essenciais para ilumina√ß√£o natural e conex√£o com o ambiente externo."
            elif "copo" in answer_lower:
                return "Os copos s√£o recipientes para l√≠quidos, geralmente feitos de vidro, pl√°stico ou cer√¢mica. S√£o usados para beber √°gua, sucos e outras bebidas."
            
            # Explica√ß√µes para paisagens
            elif "montanha" in answer_lower:
                return "As montanhas s√£o forma√ß√µes geol√≥gicas elevadas que se destacam do relevo circundante. Elas s√£o importantes para o clima e abrigam diversos ecossistemas."
            elif "paisagem montanhosa" in answer_lower:
                return "Paisagens montanhosas s√£o vistas que incluem montanhas e colinas. S√£o conhecidas por sua beleza natural e oferecem habitats √∫nicos para plantas e animais."
            elif "lago" in answer_lower:
                return "Os lagos s√£o corpos de √°gua doce cercados por terra. S√£o importantes para o ecossistema aqu√°tico e fornecem √°gua para consumo humano e animal."
            elif "rio" in answer_lower:
                return "Os rios s√£o cursos de √°gua que fluem de √°reas elevadas para o mar. S√£o fundamentais para o transporte de nutrientes e √°gua doce para diferentes regi√µes."
            elif "oceano" in answer_lower:
                return "Os oceanos s√£o grandes corpos de √°gua salgada que cobrem a maior parte da Terra. S√£o essenciais para o clima global e abrigam a maior biodiversidade do planeta."
            elif "floresta" in answer_lower:
                return "As florestas s√£o √°reas com alta densidade de √°rvores. S√£o fundamentais para o ecossistema, produzindo oxig√™nio e abrigando uma grande variedade de vida selvagem."
            elif "paisagem arborizada" in answer_lower:
                return "Paisagens arborizadas s√£o √°reas com muitas √°rvores. Oferecem habitat para animais, ajudam na purifica√ß√£o do ar e s√£o importantes para o bem-estar humano."
            elif "campo" in answer_lower:
                return "Os campos s√£o √°reas abertas com grama ou vegeta√ß√£o baixa. S√£o usados para agricultura, pecu√°ria e oferecem habitat para muitos animais."
            elif "paisagem rural" in answer_lower:
                return "Paisagens rurais s√£o √°reas do campo com pouca urbaniza√ß√£o. Incluem fazendas, campos e pequenas comunidades, sendo importantes para a produ√ß√£o de alimentos."
            elif "c√©u" in answer_lower:
                return "O c√©u √© a atmosfera vista da Terra, geralmente azul durante o dia devido √† dispers√£o da luz solar. √â onde ocorrem fen√¥menos meteorol√≥gicos como nuvens e chuva."
            elif "paisagem" in answer_lower:
                return "Paisagens s√£o vistas naturais que mostram a beleza do nosso planeta. Podem incluir montanhas, rios, florestas e outros elementos naturais."
            elif "deserto" in answer_lower:
                return "Os desertos s√£o √°reas com pouca precipita√ß√£o e vegeta√ß√£o escassa. S√£o caracterizados por temperaturas extremas e abrigam plantas e animais adaptados √† seca."
            elif "praia" in answer_lower:
                return "As praias s√£o √°reas costeiras com areia, onde a terra encontra o mar. S√£o populares para recrea√ß√£o e abrigam ecossistemas √∫nicos como dunas e vida marinha."
            elif "paisagem nevada" in answer_lower:
                return "Paisagens nevadas s√£o √°reas cobertas de neve, geralmente em regi√µes frias ou montanhosas. Oferecem vistas espetaculares e s√£o importantes para o ciclo da √°gua."
            elif "montanha nevada" in answer_lower:
                return "Montanhas nevadas s√£o picos cobertos de neve, criando paisagens majestosas. S√£o importantes para o abastecimento de √°gua e oferecem oportunidades para esportes de inverno."
        
        # Analisar a pergunta para dar explica√ß√£o mais espec√≠fica
        question_lower = question.lower()
        
        # Detectar tipo de pergunta e dar explica√ß√£o espec√≠fica
        if "animal" in question_lower or "que animal" in question_lower:
            import random
            animal_explanations = {
                "zebra": "As zebras s√£o mam√≠feros equ√≠deos nativos da √Åfrica, conhecidas por suas listras pretas e brancas √∫nicas. Cada zebra tem um padr√£o de listras diferente, como uma impress√£o digital. Elas vivem em grupos chamados har√©ns e s√£o herb√≠voras.",
                "c√£o": "Os c√£es s√£o mam√≠feros dom√©sticos da fam√≠lia Canidae. Eles s√£o conhecidos por serem leais aos humanos e possuem excelente olfato e audi√ß√£o. Foram domesticados h√° milhares de anos e s√£o considerados os melhores amigos do homem.",
                "gato": "Os gatos s√£o mam√≠feros carn√≠voros da fam√≠lia Felidae. S√£o animais dom√©sticos populares conhecidos por sua independ√™ncia, agilidade e habilidades de ca√ßa. T√™m excelente vis√£o noturna e s√£o muito flex√≠veis.",
                "le√£o": "O le√£o √© conhecido como o rei da selva. √â um grande felino carn√≠voro que vive em grupos chamados de manadas. Os machos t√™m juba caracter√≠stica e s√£o respons√°veis por proteger o territ√≥rio.",
                "elefante": "Os elefantes s√£o os maiores mam√≠feros terrestres. S√£o conhecidos por sua mem√≥ria excepcional, tromba vers√°til e presas de marfim. Vivem em grupos matriarcais e s√£o muito inteligentes.",
                "p√°ssaro": "Os p√°ssaros s√£o animais vertebrados com penas, bicos e capacidade de voar. T√™m ossos ocos para reduzir o peso e s√£o endot√©rmicos. Existem milhares de esp√©cies diferentes no mundo.",
                "cavalo": "Os cavalos s√£o mam√≠feros ungulados que foram domesticados h√° milhares de anos. S√£o conhecidos por sua velocidade, for√ßa e intelig√™ncia. Foram fundamentais para o desenvolvimento humano.",
                "vaca": "As vacas s√£o mam√≠feros ruminantes domesticados, importantes para a produ√ß√£o de leite e carne. S√£o animais herb√≠voros que vivem em rebanhos e t√™m est√¥mago com quatro compartimentos."
            }
            return random.choice(list(animal_explanations.values()))
        
        elif "planta" in question_lower or "que tipo de planta" in question_lower:
            plant_explanations = {
                "flor": "As flores s√£o estruturas reprodutivas das plantas. Elas s√£o respons√°veis pela produ√ß√£o de sementes e muitas vezes s√£o coloridas para atrair polinizadores como abelhas e borboletas.",
                "√°rvore": "As √°rvores s√£o plantas lenhosas de grande porte com tronco principal e copa. Elas s√£o fundamentais para o ecossistema, produzindo oxig√™nio, absorvendo CO2 e fornecendo habitat para muitos animais.",
                "folha": "As folhas s√£o √≥rg√£os das plantas respons√°veis pela fotoss√≠ntese. Elas capturam a luz solar e convertem CO2 e √°gua em glicose, liberando oxig√™nio como subproduto.",
                "grama": "A grama √© uma planta herb√°cea que forma tapetes verdes. √â importante para prevenir eros√£o do solo e fornece alimento para muitos animais herb√≠voros.",
                "rosa": "As rosas s√£o flores conhecidas por sua beleza e perfume. Pertencem ao g√™nero Rosa e s√£o s√≠mbolos universais de amor e romance. Existem milhares de variedades diferentes.",
                "palmeira": "As palmeiras s√£o plantas tropicais com tronco alto e folhas grandes em forma de leque. S√£o caracter√≠sticas de regi√µes quentes e s√£o importantes economicamente."
            }
            return random.choice(list(plant_explanations.values()))
        
        elif "objeto" in question_lower or "que objeto" in question_lower:
            object_explanations = {
                "carro": "Os carros s√£o ve√≠culos automotores para transporte terrestre. Eles revolucionaram a mobilidade humana e s√£o essenciais na sociedade moderna, movidos por motores de combust√£o ou el√©tricos.",
                "casa": "As casas s√£o estruturas constru√≠das para abrigar pessoas. Podem ser feitas de diversos materiais como madeira, tijolo ou concreto, e servem como prote√ß√£o contra o clima.",
                "livro": "Os livros s√£o objetos que cont√™m informa√ß√µes impressas em p√°ginas. S√£o fundamentais para a educa√ß√£o e preserva√ß√£o do conhecimento humano ao longo da hist√≥ria.",
                "mesa": "As mesas s√£o m√≥veis com superf√≠cie plana apoiada por pernas. S√£o usadas para refei√ß√µes, trabalho, estudos e muitas outras atividades cotidianas.",
                "telefone": "Os telefones s√£o dispositivos de comunica√ß√£o que permitem conversas √† dist√¢ncia. Evolu√≠ram de telefones fixos para smartphones modernos com muitas funcionalidades.",
                "bicicleta": "As bicicletas s√£o ve√≠culos de duas rodas movidos pela for√ßa humana. S√£o uma forma eficiente e ecol√≥gica de transporte, al√©m de serem usadas para exerc√≠cio e lazer."
            }
            return random.choice(list(object_explanations.values()))
        
        else:
            # Explica√ß√£o gen√©rica baseada na predi√ß√£o do modelo
            explanations = {
                0: "Os animais s√£o seres vivos que se movem e se alimentam. Eles fazem parte do reino animal e t√™m caracter√≠sticas √∫nicas como respira√ß√£o, reprodu√ß√£o e crescimento.",
                1: "As plantas s√£o seres vivos que fazem fotoss√≠ntese. Elas s√£o fundamentais para a vida na Terra, produzindo oxig√™nio e servindo como base da cadeia alimentar.",
                2: "Os objetos s√£o coisas criadas pelo ser humano para facilitar nossa vida. Eles podem ser ferramentas, utens√≠lios ou equipamentos.",
                3: "As paisagens s√£o vistas naturais que mostram a beleza do nosso planeta. Elas podem incluir montanhas, rios, florestas e outros elementos naturais."
            }
            return explanations.get(predicted.item(), "Esta √© uma imagem interessante que merece ser estudada mais detalhadamente.")
    
    def _evaluate_answer(self, answer, question):
        """Avalia se a resposta est√° correta (melhorado)"""
        # Analisar se a resposta faz sentido para o tipo de pergunta
        question_lower = question.lower()
        answer_lower = answer.lower()
        
        # Se pergunta sobre animal e resposta menciona animal, provavelmente est√° correto
        if "animal" in question_lower:
            animal_keywords = ["c√£o", "gato", "zebra", "le√£o", "elefante", "p√°ssaro", "cavalo", "vaca", "touro", "veado", "arara", "cardeal", "peixe", "cobra", "animal"]
            return any(keyword in answer_lower for keyword in animal_keywords)
        
        # Se pergunta sobre planta e resposta menciona planta, provavelmente est√° correto
        elif "planta" in question_lower:
            plant_keywords = ["flor", "√°rvore", "folha", "grama", "rosa", "palmeira", "girassol", "tronco", "planta"]
            return any(keyword in answer_lower for keyword in plant_keywords)
        
        # Se pergunta sobre objeto e resposta menciona objeto, provavelmente est√° correto
        elif "objeto" in question_lower:
            object_keywords = ["carro", "casa", "livro", "mesa", "telefone", "bicicleta", "ferramenta", "m√°quina", "cadeira", "janela", "copo", "objeto"]
            return any(keyword in answer_lower for keyword in object_keywords)
        
        # Se pergunta sobre paisagem e resposta menciona paisagem, provavelmente est√° correto
        elif "paisagem" in question_lower or "lugar" in question_lower:
            landscape_keywords = ["montanha", "rio", "lago", "oceano", "floresta", "campo", "deserto", "praia", "c√©u", "paisagem"]
            return any(keyword in answer_lower for keyword in landscape_keywords)
        
        # Para outras perguntas, usar probabilidade alta se n√£o for resposta gen√©rica
        elif "n√£o consegui identificar" not in answer_lower:
            return True
        
        # Resposta gen√©rica = incorreta
        return False
    
    def create_player(self, name):
        """Cria um novo jogador"""
        player_id = f"player_{int(time.time())}"
        player = self.gamification.create_player(player_id, name)
        return player_id, player
    
    def get_player_stats(self, player_id):
        """Retorna estat√≠sticas do jogador"""
        return self.gamification.get_player_stats(player_id)
    
    def get_leaderboard(self):
        """Retorna o ranking"""
        return self.gamification.get_leaderboard()

# Inicializar Flask app
app = Flask(__name__)
CORS(app)

# Inst√¢ncia global do jogo
game = EducationalGame()

@app.route('/')
def index():
    """P√°gina principal do jogo"""
    return render_template('index.html')

@app.route('/api/create_player', methods=['POST'])
def create_player():
    """Cria um novo jogador"""
    data = request.json
    name = data.get('name', 'Jogador')
    
    player_id, player = game.create_player(name)
    
    return jsonify({
        'success': True,
        'player_id': player_id,
        'player': {
            'id': player.id,
            'name': player.name,
            'level': player.level,
            'experience': player.experience,
            'coins': player.coins
        }
    })

@app.route('/api/process_image', methods=['POST'])
def process_image():
    """Processa imagem e pergunta"""
    data = request.json
    
    image_data = data.get('image')
    question = data.get('question', 'O que voc√™ v√™ nesta imagem?')
    player_id = data.get('player_id')
    
    if not image_data or not player_id:
        return jsonify({'success': False, 'error': 'Dados incompletos'})
    
    result = game.process_image_and_question(image_data, question, player_id)
    return jsonify(result)

@app.route('/api/player_stats/<player_id>')
def player_stats(player_id):
    """Retorna estat√≠sticas do jogador"""
    stats = game.get_player_stats(player_id)
    return jsonify(stats)

@app.route('/api/leaderboard')
def leaderboard():
    """Retorna o ranking"""
    leaderboard = game.get_leaderboard()
    return jsonify(leaderboard)

@app.route('/api/train_model', methods=['POST'])
def train_model():
    """Inicia treinamento do modelo"""
    try:
        from training.trainer import TrainingPipeline
        
        # Configura√ß√µes de treinamento
        epochs = request.json.get('epochs', 5)
        learning_rate = request.json.get('learning_rate', 0.001)
        
        # Criar dataset
        dataset = EducationalDataset(
            data_path='data',
            transform=game.transform,
            tokenizer=game.tokenizer
        )
        
        # Dividir em train/val
        train_size = int(0.8 * len(dataset))
        val_size = len(dataset) - train_size
        train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])
        
        # Criar dataloaders
        train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=4, shuffle=True)
        val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=4, shuffle=False)
        
        # Criar pipeline de treinamento
        trainer = TrainingPipeline(game.model)
        
        # Treinar modelo
        trainer.train(train_loader, val_loader, epochs=epochs, lr=learning_rate)
        
        return jsonify({
            'success': True,
            'message': 'Treinamento conclu√≠do com sucesso!'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

if __name__ == '__main__':
    print("üéÆ Iniciando Jogo Educacional com Chatbot Multimodal")
    print("=" * 60)
    print("Funcionalidades:")
    print("‚úÖ Reconhecimento de imagens (Vis√£o Computacional)")
    print("‚úÖ Interpreta√ß√£o de perguntas (Processamento de Linguagem Natural)")
    print("‚úÖ Gera√ß√£o de explica√ß√µes did√°ticas")
    print("‚úÖ Sistema de gamifica√ß√£o completo")
    print("‚úÖ Interface web interativa")
    print("=" * 60)
    
    # Criar diret√≥rios necess√°rios
    os.makedirs('templates', exist_ok=True)
    os.makedirs('static', exist_ok=True)
    os.makedirs('data', exist_ok=True)
    
    # Executar aplica√ß√£o
    app.run(debug=True, host='0.0.0.0', port=5000)
